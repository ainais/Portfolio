rbac:
  create: true
  pspEnabled: true
  pspUseAppArmor: true
  namespaced: false
  extraRoleRules: []
  extraClusterRoleRules: []

serviceAccount:
  create: true
  name:
  nameTest:
  autoMount: true

replicas: 1

podAnnotations:
  sidecar.istio.io/inject: 'true'

## Create a headless service for the deployment
headlessService: false

autoscaling:
  enabled: false

podDisruptionBudget: {}

deploymentStrategy:
  type: RollingUpdate

readinessProbe:
  httpGet:
    path: /healthz/ready
    port: 3000
  initialDelaySeconds: 5
  timeoutSeconds: 30
  failureThreshold: 10

livenessProbe:
  httpGet:
    path: /healthz/ready
    port: 3000
  initialDelaySeconds: 5
  timeoutSeconds: 30
  failureThreshold: 10

image:
  repository: grafana/grafana
  tag: ""
  sha: ""
  pullPolicy: IfNotPresent

securityContext:
  runAsUser: 472
  runAsGroup: 472
  fsGroup: 472

containerSecurityContext: {}
createConfigmap: true
extraConfigmapMounts: []
extraEmptyDirMounts: []
extraLabels: {}

downloadDashboardsImage:
  repository: curlimages/curl
  tag: 7.73.0
  sha: ""
  pullPolicy: IfNotPresent

downloadDashboards:
  env: {}
  envFromSecret: ""
  resources: {}

podPortName: grafana

service:
  enabled: true
  type: ClusterIP
  port: 80
  targetPort: 3000
    # targetPort: 4181 To be used with a proxy extraContainer
  annotations: {}
  labels: {}
  portName: service
  appProtocol: ""

serviceMonitor:
  enabled: false
  path: /metrics
  labels: {}
  interval: 1m
  scheme: http
  tlsConfig: {}
  scrapeTimeout: 30s
  relabelings: []

extraExposePorts: []
hostAliases: []

ingress:
  enabled: true
  ingressClassName: nginx
  annotations: {}
  labels: {}
  path: /

  pathType: ImplementationSpecific

  hosts:
    - grafana.domain.com
  extraPaths: []
  tls: []

resources: {}
nodeSelector: {}
tolerations: []
affinity: {}
extraInitContainers: []

extraContainers: ""
extraContainerVolumes: []

persistence:
  type: pvc
  enabled: false
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  finalizers:
    - kubernetes.io/pvc-protection
  inMemory:
    enabled: false

initChownData:
  enabled: true

  image:
    repository: busybox
    tag: "1.31.1"
    sha: ""
    pullPolicy: IfNotPresent

  resources: {}

adminUser: admin
adminPassword: admin

admin:
  existingSecret: ""
  userKey: admin-user
  passwordKey: admin-password

env: {}
envValueFrom: {}
envFromSecret: ""
envRenderSecret: {}
envFromSecrets: []
envFromConfigMaps: []
enableServiceLinks: true
extraSecretMounts: []
extraVolumeMounts: []
lifecycleHooks: {}
plugins: []
datasources: {}
notifiers: {}
dashboardProviders: {}
dashboards: {}
dashboardsConfigMaps: {}

grafana.ini:
  paths:
    data: /var/lib/grafana/
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
  grafana_net:
    url: https://grafana.net
  server:
    domain: "{{ if (and .Values.ingress.enabled .Values.ingress.hosts) }}{{ .Values.ingress.hosts | first }}{{ end }}"

ldap:
  enabled: false
  existingSecret: ""
  config: ""

smtp:
  existingSecret: ""
  userKey: "user"
  passwordKey: "password"

sidecar:
  image:
    repository: quay.io/kiwigrid/k8s-sidecar
    tag: 1.19.2
    sha: ""
  imagePullPolicy: IfNotPresent
  resources: {}
  securityContext: {}
  enableUniqueFilenames: false
  readinessProbe: {}
  livenessProbe: {}
  logLevel: INFO
  dashboards:
    env: {}
    enabled: false
    SCProvider: true
    label: grafana_dashboard
    labelValue: ""
    folder: /tmp/dashboards
    defaultFolderName: null
    searchNamespace: null
    watchMethod: WATCH
    resource: both
    folderAnnotation: null
    script: null
    
    provider:
      name: sidecarProvider
      orgid: 1
      folder: ''
      type: file
      disableDelete: false
      allowUiUpdates: false
      foldersFromFilesStructure: false
    extraMounts: []
    sizeLimit: {}

  datasources:
    enabled: false
    label: grafana_datasource
    labelValue: ""
    searchNamespace: null
    watchMethod: WATCH
    resource: both
    reloadURL: "http://localhost:3000/api/admin/provisioning/datasources/reload"
    skipReload: false
    initDatasources: false
    sizeLimit: {}
  plugins:
    enabled: false
    label: grafana_plugin
    labelValue: ""
    searchNamespace: null
    watchMethod: WATCH
    resource: both
    reloadURL: "http://localhost:3000/api/admin/provisioning/plugins/reload"
    skipReload: false
    initPlugins: false
    sizeLimit: {}

  notifiers:
    enabled: false
    label: grafana_notifier
    searchNamespace: null
    resource: both
    sizeLimit: {}

namespaceOverride: ""
revisionHistoryLimit: 10

imageRenderer:
  enabled: false
  replicas: 1
  image:
    repository: grafana/grafana-image-renderer
    tag: latest
    sha: ""
    pullPolicy: Always
  env:
    HTTP_HOST: "0.0.0.0"
  serviceAccountName: ""
  securityContext: {}
  hostAliases: []
  priorityClassName: ''
  service:
    enabled: true
    portName: 'http'
    port: 8081
    targetPort: 8081
    appProtocol: ""
  grafanaProtocol: http
  grafanaSubPath: ""
  podPortName: http
  revisionHistoryLimit: 10
  networkPolicy:
    limitIngress: true
    limitEgress: false
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

networkPolicy:
  enabled: false
  ingress: true
  allowExternal: true
  explicitNamespacesSelector: {}

  egress:
    enabled: false
    ports: []

enableKubeBackwardCompatibility: false
useStatefulSet: false
extraObjects: []

virtualService:
  enabled: true
  gateway: default/one-gateway
  hosts:
  - "dev.grafana.bapliehub.cherry-solutions.com"


